/********************************************************************************
*                                                                               *
*              E x c e p t i o n  H a n d l i n g  D i a l o g                  *
*                                                                               *
*********************************************************************************
* Copyright (C) 2002,2003 by Niall Douglas.   All Rights Reserved.              *
*       NOTE THAT I DO NOT PERMIT ANY OF MY CODE TO BE PROMOTED TO THE GPL      *
*********************************************************************************
* This code is free software; you can redistribute it and/or modify it under    *
* the terms of the GNU Library General Public License v2.1 as published by the  *
* Free Software Foundation EXCEPT that clause 3 does not apply ie; you may not  *
* "upgrade" this code to the GPL without my prior written permission.           *
* Please consult the file "License_Addendum2.txt" accompanying this file.       *
*                                                                               *
* This code is distributed in the hope that it will be useful,                  *
* but WITHOUT ANY WARRANTY; without even the implied warranty of                *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                          *
*********************************************************************************
* $Id:                                                                          *
********************************************************************************/

#include "fxdefs.h"
#include "FXApp.h"
#include "FXExceptionDialog.h"
#include "FXException.h"
#include "FXVerticalFrame.h"
#include "FXHorizontalFrame.h"
#include "FXGIFIcon.h"
#include "FXText.h"
#include "FXPrimaryButton.h"
#include "FXProcess.h"
#include "FXTrans.h"
#include "FXIODevice.h"
#include "FXRollback.h"
#include <stdlib.h>
#include <string.h>
#include "FXMemDbg.h"
#if defined(DEBUG) && defined(FXMEMDBG_H)
static const char *_fxmemdbg_current_file_ = __FILE__;
#endif

namespace FX {

// Map
FXDEFMAP(FXExceptionDialog) FXExceptionDialogMap[]={
	FXMAPFUNC(SEL_COMMAND, FXExceptionDialog::ID_CANCEL, FXExceptionDialog::onCmdClicked),
	FXMAPFUNC(SEL_COMMAND, FXExceptionDialog::ID_RETRY,  FXExceptionDialog::onCmdClicked),
	FXMAPFUNC(SEL_COMMAND, FXExceptionDialog::ID_QUIT,   FXExceptionDialog::onCmdClicked),
	FXMAPFUNC(SEL_COMMAND, FXExceptionDialog::ID_FULLDETAIL, FXExceptionDialog::onCmdFullDetail)
};


// Object implementation
FXIMPLEMENT(FXExceptionDialog,FXHandedDialog,FXExceptionDialogMap,ARRAYNUMBER(FXExceptionDialogMap))

/* Generated by reswrap from file FatalErrorIcon.gif */
const unsigned char FatalErrorIcon[]={
  0x47,0x49,0x46,0x38,0x39,0x61,0x2a,0x00,0x28,0x00,0xb3,0x00,0x00,0xff,0xff,0xff,
  0xff,0xff,0xff,0xde,0x00,0x00,0xff,0x84,0x84,0xbd,0xbd,0xbd,0x9c,0x9c,0x9c,0x73,
  0x73,0x73,0xde,0xde,0xde,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0xf9,0x04,
  0x01,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x2a,0x00,0x28,0x00,0x00,0x04,
  0xfe,0x10,0xc8,0x49,0xeb,0x0c,0x38,0xdb,0xcd,0x7b,0xcd,0xc3,0xa0,0x79,0x24,0x99,
  0x09,0xa8,0x30,0x96,0x2c,0x85,0x0d,0x69,0x2a,0x06,0x6d,0x0d,0x60,0x71,0x8c,0xd9,
  0xec,0x9b,0xe2,0xa8,0x19,0xcf,0x14,0x90,0xf9,0x50,0xbb,0x21,0xe7,0xa8,0x3a,0x05,
  0x93,0xca,0x4f,0xf1,0x09,0xfa,0xd1,0xa2,0xae,0x00,0x0c,0x99,0x01,0x0a,0x84,0x58,
  0x89,0x77,0xd6,0xdd,0x36,0xc3,0x37,0xad,0xb5,0x3b,0x86,0x2a,0xdb,0x6c,0xa6,0x9b,
  0x27,0x8f,0x3b,0xbf,0xf3,0x1a,0xdc,0xae,0xe6,0xbe,0xfb,0x4d,0x7c,0x70,0x43,0x6d,
  0x07,0x86,0x07,0x04,0x06,0x04,0x05,0x06,0x05,0x80,0x79,0x44,0x66,0x01,0x88,0x04,
  0x95,0x05,0x8b,0x06,0x99,0x8e,0x46,0x57,0x2d,0x63,0x87,0x8b,0x05,0x8c,0x8d,0xa2,
  0x99,0x92,0x9d,0x25,0x72,0x05,0x94,0x97,0x8c,0xa3,0xad,0x53,0x78,0xa8,0x1e,0x6d,
  0xa1,0x07,0x97,0x8a,0x99,0xba,0x06,0x8f,0xb3,0x4b,0xbd,0x5d,0x86,0xad,0x04,0x71,
  0x9c,0xa9,0xb1,0x64,0xc1,0xa5,0x76,0xa7,0x91,0x6b,0x6c,0x94,0xc4,0x76,0xc6,0x1d,
  0x7b,0x19,0x86,0x96,0xae,0x71,0xcd,0xbf,0xa7,0xca,0xd8,0xa5,0x8c,0xc5,0x54,0xbf,
  0x9c,0xd0,0x97,0x89,0x8d,0xbc,0xdb,0x56,0x1b,0x75,0x82,0xb7,0x82,0x83,0x52,0xe6,
  0x7c,0x95,0xf2,0xbd,0x52,0xde,0x82,0xf7,0xf8,0xd4,0x62,0xc8,0xf0,0x05,0x58,0x24,
  0x90,0x5b,0x9a,0x7d,0x7c,0x58,0x09,0xa4,0x66,0xcd,0x5e,0xa8,0x82,0xed,0xde,0x39,
  0x14,0x95,0x48,0x9c,0xbc,0x7a,0x3a,0x04,0x6a,0xec,0x92,0xd1,0x4b,0x8e,0x8f,0x1c,
  0x20,0x43,0x8a,0x2c,0x23,0xb2,0xa4,0xc9,0x8f,0xc9,0x3c,0x9e,0x5c,0x99,0xa3,0x4b,
  0x9a,0x8d,0x30,0x05,0x5d,0x88,0x49,0xd3,0x25,0x80,0x08,0x00,0x00,0x3b
  };

/* Generated by reswrap from file ErrorIcon.gif */
const unsigned char ErrorIcon[]={
  0x47,0x49,0x46,0x38,0x39,0x61,0x2a,0x00,0x28,0x00,0xb3,0x00,0x00,0xff,0xff,0xff,
  0xff,0xff,0xff,0xde,0x00,0x00,0xff,0x84,0x84,0x9c,0x9c,0x9c,0xde,0xde,0xde,0xbd,
  0xbd,0xbd,0x31,0x31,0x31,0x00,0x00,0x00,0x52,0x52,0x52,0x73,0x73,0x73,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0xf9,0x04,
  0x01,0x00,0x00,0x00,0x00,0x2c,0x00,0x00,0x00,0x00,0x2a,0x00,0x28,0x00,0x00,0x04,
  0xfe,0x10,0xc8,0x49,0xeb,0x0c,0x38,0xdb,0xcd,0x7b,0xcd,0xc3,0xa0,0x79,0x24,0x99,
  0x09,0xa8,0x30,0x96,0x2c,0x85,0x0d,0x69,0x2a,0x06,0x6d,0x0d,0x60,0x71,0x8c,0xd9,
  0xec,0x9b,0xe2,0xa8,0x19,0xcf,0x14,0x90,0xf9,0x50,0xbb,0x21,0xe7,0xa8,0x3a,0x05,
  0x93,0xca,0x4f,0xf1,0x09,0xfa,0xd1,0xa2,0xae,0x00,0x0c,0x99,0x01,0x0a,0x84,0x58,
  0x89,0x77,0x66,0x20,0x14,0xb4,0xd6,0xf0,0x0d,0x8d,0x34,0x24,0x10,0x70,0xc2,0xf4,
  0x0b,0x55,0x8e,0x03,0x07,0xb8,0xbe,0xb0,0x6d,0x62,0x99,0x01,0x05,0x7a,0x7a,0x72,
  0x46,0x57,0x43,0x77,0x82,0x83,0x08,0x06,0x6c,0x7e,0x88,0x8e,0x18,0x05,0x79,0x83,
  0x67,0x73,0x60,0x36,0x77,0x18,0x0a,0x83,0x07,0x55,0x5c,0x3c,0x80,0x19,0x06,0x83,
  0x0a,0x5d,0x86,0x99,0x97,0x5d,0x05,0x6f,0x70,0x8d,0x9f,0x8f,0x3d,0x91,0x5d,0x01,
  0x9c,0x70,0x96,0x4e,0x74,0x87,0x44,0x86,0x5d,0xa4,0x08,0x09,0xb4,0xb3,0xb2,0x7d,
  0xc2,0x81,0x70,0xa6,0xc2,0xa8,0xbc,0x54,0xc2,0x71,0xc6,0xc5,0xbb,0x1b,0xa2,0xc6,
  0x79,0xaf,0xca,0x54,0x1e,0x9a,0xd5,0x8c,0xc6,0xc3,0x4b,0xb3,0xde,0x09,0x07,0xb8,
  0xd8,0xba,0xe0,0xbd,0xde,0xea,0xa2,0xd3,0xe1,0xde,0x65,0xe5,0xe6,0x98,0x17,0xaa,
  0xef,0x94,0x08,0x72,0xde,0xd1,0x52,0xd1,0xc6,0x93,0x8b,0xd7,0xe4,0xd5,0xd9,0x26,
  0xec,0xd7,0xa0,0x7c,0xd0,0xd2,0x88,0x71,0x27,0xec,0xdf,0xa0,0x80,0x02,0xaf,0x10,
  0x34,0x66,0xe0,0x1e,0x42,0x7d,0x69,0xa8,0xad,0x0b,0x40,0xc0,0xcc,0x46,0x82,0x24,
  0x3a,0x3e,0x8a,0x3c,0x65,0xc5,0x4b,0x8e,0x93,0x28,0x53,0xaa,0xec,0xd2,0x47,0xa5,
  0xcb,0x97,0xe9,0x4c,0xc2,0x9c,0x99,0xa3,0xcb,0x9a,0x91,0x38,0xd5,0xd1,0xcb,0xc9,
  0x73,0x44,0x04,0x00,0x00,0x3b
  };


class FXExceptionDetails : public FXHandedDialog
{
	FXDECLARE(FXExceptionDetails)
	FXExceptionDialog *myowner;
	FXExceptionDetails(const FXExceptionDetails &);
	FXExceptionDetails &operator=(const FXExceptionDetails &);
protected:
	FXExceptionDetails() {}
public:
	enum
	{
		ID_COPYTOCLIPBOARD=FXHandedDialog::ID_LAST,
		ID_LAST
	};
	FXExceptionDetails(FXExceptionDialog *owner,  FXuint opts=DECOR_ALL,FXint x=0,FXint y=0,FXint w=0,FXint h=0,FXint pl=DEFAULT_PAD,FXint pr=DEFAULT_PAD,FXint pt=DEFAULT_PAD,FXint pb=DEFAULT_PAD,FXint hs=DEFAULT_SPACING,FXint vs=DEFAULT_SPACING)
		: myowner(owner), FXHandedDialog(owner, FXTrans::tr("FXExceptionDetails", "Full error report"), opts|HANDEDINTERFACE_OKBUTTON, x,y,w,h, pl,pr,pt,pb, hs,vs)
	{
		FXText *text;
		FXERRHM(text=   new FXText(this, NULL, 0, TEXT_READONLY|TEXT_WORDWRAP|LAYOUT_FILL));
		text->setText(myowner->e->report());

		FXERRHM(new FXButton(buttonWell(), tr("&Copy to clipboard"), NULL, this, ID_COPYTOCLIPBOARD, BUTTON_NORMAL|FXWindow::userHandednessLayout()|LAYOUT_CENTER_Y));
		resize(420,256);
	}
	long onClipboardRequest(FXObject *sender, FXSelector sel, void *ptr)
	{
		const FXString &txt=myowner->e->report();
		FXuchar *buff;
		FXMALLOC(&buff, FXuchar, (txt.length()+1)*2);
		bool midNL;
		FXuval inputlen=txt.length();
		FXuval actuallen=FXIODevice::applyCRLF(midNL, buff, (FXuchar *) txt.text(), (txt.length()+1)*2, inputlen);
		setDNDData(FROM_CLIPBOARD, stringType, (FXuchar *) buff, actuallen+1);
		return 1;
	}
	long onCmdCopy(FXObject *sender, FXSelector sel, void *ptr)
	{
		if(!acquireClipboard(&stringType, 1)) getApp()->beep();
		return 1;
	}
};
FXDEFMAP(FXExceptionDetails) FXExceptionDetailsMap[]={
	FXMAPFUNC(SEL_CLIPBOARD_REQUEST, 0, FXExceptionDetails::onClipboardRequest),
	FXMAPFUNC(SEL_COMMAND, FXExceptionDetails::ID_COPYTOCLIPBOARD, FXExceptionDetails::onCmdCopy)
};
FXIMPLEMENT(FXExceptionDetails,FXHandedDialog,FXExceptionDetailsMap,ARRAYNUMBER(FXExceptionDetailsMap));


long FXExceptionDialog::onCmdClicked(FXObject *sender, FXSelector sel, void *ptr)
{
	getApp()->stopModal(this, FXSELID(sel));
	hide();
	return 1;
}

long FXExceptionDialog::onCmdFullDetail(FXObject *sender, FXSelector sel, void *ptr)
{
	if(!details)
	{
		FXERRHM(details=new FXExceptionDetails(this));
		details->create();
	}
	details->show(PLACEMENT_CURSOR);
	return 1;
}

FXExceptionDialog::FXExceptionDialog(FXApp *a, FXException &_e,FXuint opts,FXint x,FXint y,FXint w,FXint h,FXint pl,FXint pr,FXint pt,FXint pb,FXint hs,FXint vs)
	: e(&_e), ic(0), details(0),
	FXHandedDialog(a, (_e.isFatal() ? FXTrans::tr("FXExceptionDialog", "Fatal Error from %1") : FXTrans::tr("FXExceptionDialog", "Error from %1")).arg(a->getAppName()),
	opts|HANDEDINTERFACE_DEFCANCELBUTTON,x,y,w,h,pl,pr,pt,pb,hs,vs)
{
	init();
}

FXExceptionDialog::FXExceptionDialog(FXWindow *owner, FXException &_e,FXuint opts,FXint x,FXint y,FXint w,FXint h,FXint pl,FXint pr,FXint pt,FXint pb,FXint hs,FXint vs)
	: e(&_e), ic(0), details(0),
	FXHandedDialog(owner, (_e.isFatal() ? FXTrans::tr("FXExceptionDialog", "Fatal Error from %1") : FXTrans::tr("FXExceptionDialog", "Error from %1")).arg(owner->getApp()->getAppName()),
	opts|HANDEDINTERFACE_DEFCANCELBUTTON,x,y,w,h,pl,pr,pt,pb,hs,vs)
{
	init();
}

void FXExceptionDialog::init()
{
	FXRBOp unconstr=FXRBConstruct(this);
	setHelpTag(tr("This is asking you what to do about the listed error"));
	FXVerticalFrame *top;
	FXHorizontalFrame *top2;
	FXText *text;
	FXERRHM(top=    new FXVerticalFrame(this, FRAME_RIDGE|LAYOUT_FILL));

	FXERRHM(top2=new FXHorizontalFrame(top, LAYOUT_FILL, 0,0,0,0, 0,0,0,0, 0,0));
	FXERRHM(ic=  new FXGIFIcon(getApp(), e->isFatal() ? FatalErrorIcon : ErrorIcon));
	FXERRHM(new FXLabel(top2, FXString(), ic));

	FXERRHM(text=new FXText(top2, NULL, 0, TEXT_READONLY|TEXT_WORDWRAP|LAYOUT_FILL));
	text->setBackColor(getBackColor());
	text->setText(e->message());
	text->setHelpTag(tr("This describes the error which has occurred"));

	FXERRHM(new FXButton(top, tr("&Full detail"), NULL, this, ID_FULLDETAIL, BUTTON_NORMAL|LAYOUT_BOTTOM|FXWindow::userHandednessLayout()));

	FXPrimaryButton *pb=cancelButton(), *rb=0, *qb=0;
	if((e->flags() & FXERRH_ISFATAL)) pb->disable();
	pb->setHelpTag(tr("Press to cancel the operation and return to the program"));

	FXERRHM(rb=new FXPrimaryButton(buttonWell(), tr("&Retry"), NULL, this, ID_RETRY, PBUTTON_OK));
	if((e->flags() & (FXERRH_ISNORETRY|FXERRH_ISFATAL))) rb->disable();
	rb->setHelpTag(tr("Press to attempt to retry the operation"));

	FXERRHM(qb=new FXPrimaryButton(buttonWell(), tr("&Quit"), NULL, this, ID_QUIT, PBUTTON_NORMAL));
	qb->setHelpTag(tr("Press to immediately quit the program"));

	if(pb->isEnabled()) pb->setFocus(); else qb->setFocus();
	resize(360, 240);
	unconstr.dismiss();
}

FXExceptionDialog::~FXExceptionDialog()
{ FXEXCEPTIONDESTRUCT1 {
	destroy();
	FXDELETE(ic);
} FXEXCEPTIONDESTRUCT2; }

void FXExceptionDialog::create()
{
	FXHandedDialog::create();
	if(ic) ic->create();
	getApp()->errorBeep();
}
void FXExceptionDialog::destroy()
{
	FXHandedDialog::destroy();
	if(ic) ic->destroy();
}

FXuint FXExceptionDialog::execute(FXuint placement)
{
	create();
	show(placement);
	switch(getApp()->runModalFor(this))
	{
	case ID_CANCEL:
		return 0;
	case ID_RETRY:
		return 1;
	case ID_QUIT:
		{
			getApp()->exit(1);
			FXProcess::exit(1);
		}
	}
	return 0;
}

} // namespace
