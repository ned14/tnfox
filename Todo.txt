Platform-specific issues:
-=-=-=-=-=-=-=-=-=-=-=-=-
NT v5.0 to v5.2 Failures:
  1. If FXMemMap maps in a file for write access, then another FXMemMap maps in
the same file for write access, you will find you cannot map in parts of the
second section because of an "Access Denied" error (which is silently eaten
and only reported by TnFOX to the console). Cause: totally unknown, it
appears to be a misfeature of NT long reported by others all over the internet.
This problem does not apply if either file is not write access.

Linux Kernel v2.4.20 (RH9) Failures:
  None known, but thread cancellation during pipe operations is a little flaky
in Tn (see the cleanup() in FXIPCChannel). NOTE THAT THIS HAS NOT BEEN TESTED
SINCE THE v0.80 RELEASE!

Linux Kernel v2.6.13 Failures:
  1. TestDeviceIO, there is an out of memory exception at the start. This is
due to an optimisation bug in GCC v4.1.
  2. TestSQLDB, there is a segfault in the linker on load. This is due to a
bug in the linker.
  3. TestMemoryPool, there is a clash between glibc's memory allocator and
TnFOX's. This will get fixed soon.

FreeBSD v5.3 Failures:
  1. TestFSMonitor, the FAM daemon uses polling on BSD and thus the test's
timings are off - therefore the events don't open as they should.
  2. TestEmbedPython, dies due to BSD memory allocator and TnFOX's clashing.
This will get fixed soon.

Known bugs:
-=-=-=-=-=-
* Valgrind complains about how we fake a primary thread object. It also doesn't
like the marker test FXMemoryPool's global allocator operators perform to detect
which blocks belong to the system allocator.
* TestGeneric fails to compile with GCC
* QLocalPipe has some problem when running under QSSLDevice. Will investigate
later.
* TestPython on exit fails with a segfault on all platforms. This appears to be
due to a bad memory block free.
* TnFOX and Intel's C++ compiler for Linux currently don't play nice. You'll
get a segfault in _ZNSt6_WinitC9Ev in libcprts.so which suggests it's TnFOX's
redefinition of the global new operator to be the cause (this means it's a bug
in ICC).


Coming shortly:
-=-=-=-=-=-=-=-
* Get QTrans to run per-thread locales
* Have FXPacker dynamically cause horizontally packed items to go
vertical if there isn't enough space (small screen support)
* Add test of new sort function capability to TestPython
* Add comprehensive test of all security facilities ensuring it very
hard to compromise secure data
* Have QMutex spin only when up to N threads are waiting, where N is the
number of processor cores in the system. It's far faster to give up your
time slice when three threads wait on a two processor system due to round
robin scheduler behaviour. Also fix QMutex to no longer use atomic instructions
when recursing into the mutex (make more assumptions about cache coherency)

Eventually:
-=-=-=-=-=-
* Temp string additions to FXString (use templates?)
* Currency and time formatting extensions to FXTrans (needs more std support
though - maybe those extended GNU functions or <locale>?)
* Have python bindings extract argc & argv before instantiating FXProcess

Other:
* MSVC doesn't make temporaries const which is very useful for implementing
copy constructors which actually move. GCC however is more strict and
does make them const, thus breaking this semantic.
   We're really waiting for move constructors to be added to the ISO C++ spec,
this will take a few years if based on past experience. Defining
HAVE_MOVECONSTRUCTORS enables the proposed syntax.
   Until then, HAVE_CONSTTEMPORARIES when defined makes the copy constructors
take a const reference even though in fact it modifies the original.
